#!/usr/bin/env bash

# Credits
# Sepero/temp-throttle - getting frequencies, making list, setting frequency

# these values must be changed
thresholdTemp=60 # threshold temperature
throttleMultiplier=2 # throttle by $throttleMultiplier(00)kHz for every 1 degree over threshold
logDirectory="/home/user/.logs/throttled" # directory to log to
logFrequency=true # change to false if you do not want frequencies to be logged
tempDirectories=( "/sys/devices/platform/applesmc.768" "/sys/devices/platform/coretemp.0/hwmon/hwmon2" ) # directories where temperature files are stored
globbingPatterns=( "temp*_input" "temp*_input" ) # globbing patterns for temperature files. in my case the files were named "temp[number]_input"

# these directories *might* need to be changed 
availableFreq="/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies" 
minFreq="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq"
maxFreq="/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq"

mkdir -p "$logDirectory" # make sure log directory exists
cores=$(($(nproc)-1)) # get number of cores and subtract 1
currentFreq=1 # set the current frequency value to 1 initially

if [[ -f $availableFreq ]]; then
    # get list of frequencies if file available 
    freqList=$(cat $availableFreq | xargs -n1 | sort -g -r | xargs) || { echo "error processing scaling_available_frequencies" >> "$logDirectory/error"; exit 1; } 
elif [[ -f $minFreq && -f $maxFreq ]]; then
    # else make a list of frequencies between min and max
    freqList=$(seq $(cat $maxFreq) -100000 $(cat $minFreq)) || { echo "error processing min and max frequency files" >> "$logDirectory/error"; exit 1; } 
else
    echo "unable to find available frequencies" >> "$logDirectory/error"
    exit 1  
fi

freqListLen=$(echo $freqList | wc -w)

setFreq () {
    freqToSet=$(echo $freqList | cut -d " " -f $currentFreq) # choose current frequency from list
    for i in $(seq 0 $cores); do
        { echo $freqToSet 2> /dev/null > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq; } || 
        { echo "$(date):failed to set frequency of core $(($i + 1))" >> "$logDirectory/error"; }
    done
    if $logFrequency; then 
        echo "$(date +%T) $freqToSet" >> "$logDirectory/log"
    fi
}

getTemp () {
    tempValues=() # make an array of the temperature values from the different files
    for i in "${!tempDirectories[@]}"; do
        directory="${tempDirectories[$i]}"
        globbingPattern="${globbingPatterns[$i]}"
        for file in $directory/$globbingPattern; do
            if [[ -f "$file" ]]; then
                tempValues+=($(cat $file))
            else
                echo "$directory/$globbingPattern not found" >> "$logDirectory/error"
            fi
        done
    done
    sortedTemps=($(printf "%s\n" "${tempValues[@]}" | sort -nr)) # sort the array in descending order
    temp=$((${sortedTemps[0]} / 1000)) # get the first value and divide by 1000
}

setFreq $currentFreq # unthrottle when first starting

while true; do
    getTemp 
    if [[ $temp -gt $thresholdTemp ]]; then # check if temperature is above threshold
        tempDifference=$(($temp - $thresholdTemp)) # calculate the difference between the threshold and the actual temp
        currentFreq=$(($tempDifference * $throttleMultiplier)) # multiply temperature over threshold by multiplier
        setFreq $currentFreq
    else
        currentFreq=1 # unthrottle if not above threshold
        setFreq $currentFreq
    fi
    sleep 2
done
